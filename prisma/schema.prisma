// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  firstName     String?
  lastName      String?
  bio           String?
  churchName    String?
  churchWebsite String?
  services      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth.js fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Invite relationship fields
  invitedBy     User?     @relation("UserInvites", fields: [inviterId], references: [id])
  inviterId     String?
  invitees      User[]    @relation("UserInvites")
  
  // Invite code relationship
  inviteCode    InviteCode?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InviteCode {
  id          String    @id @default(cuid())
  code        String    @unique
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  claimed     Boolean   @default(false)
  claimedAt   DateTime?
} 