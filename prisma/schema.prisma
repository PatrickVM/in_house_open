generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String?
  firstName     String?
  lastName      String?
  bio           String?
  churchName    String?
  churchWebsite String?
  services      String?
  role          UserRole    @default(USER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  latitude      Float?
  longitude     Float?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  phone         String?
  emailVerified DateTime?
  image         String?
  inviterId     String?
  isActive      Boolean     @default(true)
  
  // Church membership fields
  churchId                    String?
  churchMembershipStatus      ChurchMembershipStatus @default(NONE)
  churchJoinRequestedAt       DateTime?
  verifiedAt                  DateTime?              // When user became verified church member
  
  accounts      Account[]
  inviteCode    InviteCode?
  claimedItems  Item[]      @relation("ItemClaimer")
  sessions      Session[]
  invitedBy     User?       @relation("UserInvites", fields: [inviterId], references: [id])
  invitees      User[]      @relation("UserInvites")
  ledChurch     Church?     @relation("LeadContactForChurch")
  
  // Church membership relations
  church                      Church? @relation("ChurchMembers", fields: [churchId], references: [id])
  verificationRequests        ChurchVerificationRequest[] @relation("UserVerificationRequests")
  verificationsMade           ChurchVerificationRequest[] @relation("VerifierUser")
  memberVerifications         MemberVerification[] @relation("MemberVerifications")
  
  // New invitation relations
  churchInvitationsSent       ChurchInvitation[] @relation("ChurchInvitations")
  claimedChurchInvitations    ChurchInvitation[] @relation("ClaimedChurchInvitations")
  invitationAnalytics         InvitationAnalytics?
  
  // Message relations
  createdMessages     Message[]         @relation("CreatedMessages")
  moderatedMessages   Message[]         @relation("ModeratedMessages")
  pollResponses       PollResponse[]    @relation("PollResponses")
  formResponses       FormResponse[]    @relation("FormResponses")
  
  // Walkthrough relations
  walkthroughProgress   WalkthroughProgress[]   @relation("WalkthroughProgress")
  walkthroughAnalytics  WalkthroughAnalytics[]  @relation("WalkthroughAnalytics")
  activityLogs          ActivityLog[]           @relation("ActivityLogs")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InviteCode {
  id        String    @id @default(cuid())
  code      String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  userId    String    @unique
  scans     Int       @default(0)  // QR code scan count
  lastScannedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Item {
  id               String     @id @default(cuid())
  title            String
  description      String?
  category         String
  latitude         Float
  longitude        Float
  address          String?
  city             String?
  state            String?
  zipCode          String?
  status           ItemStatus @default(AVAILABLE)
  moderationStatus String     @default("APPROVED")
  moderationNotes  String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  claimedAt        DateTime?
  completedAt      DateTime?
  claimerId        String?
  claimer          User?      @relation("ItemClaimer", fields: [claimerId], references: [id])
  churchId         String     // Added: Foreign key to Church
  church           Church     @relation("ChurchItems", fields: [churchId], references: [id]) // Added: Relation to Church
}

model Church {
  id                  String              @id @default(cuid())
  name                String
  leadPastorName      String
  website             String?
  address             String
  city                String
  state               String
  zipCode             String
  latitude            Float?
  longitude           Float?
  applicationStatus   ApplicationStatus   @default(PENDING)
  rejectionReason     String?
  leadContactId       String              @unique
  
  // Verification settings
  requiresVerification        Boolean     @default(true)
  minVerificationsRequired    Int         @default(2)
  
  leadContact         User                @relation("LeadContactForChurch", fields: [leadContactId], references: [id])
  items               Item[]              @relation("ChurchItems")
  
  // Church membership relations
  members             User[]              @relation("ChurchMembers")
  verificationRequests ChurchVerificationRequest[]
  
  // Message relations
  messages            Message[]           @relation("ChurchMessages")
  
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model ChurchVerificationRequest {
  id                String              @id @default(cuid())
  userId            String              // User requesting to join
  churchId          String              // Church they want to join
  requesterId       String              // User who made the request (usually same as userId)
  verifierId        String?             // User who verified
  status            VerificationStatus  @default(PENDING)
  createdAt         DateTime            @default(now())
  verifiedAt        DateTime?
  rejectedAt        DateTime?
  notes             String?
  memberNotes       String?             // Added: Member verification notes
  
  user              User                @relation("UserVerificationRequests", fields: [userId], references: [id])
  church            Church              @relation(fields: [churchId], references: [id])
  verifier          User?               @relation("VerifierUser", fields: [verifierId], references: [id])
  memberVerifications MemberVerification[]
  
  @@unique([userId, churchId])
}

model MemberVerification {
  id                String              @id @default(cuid())
  requestId         String              // References the original ChurchVerificationRequest
  verifierId        String              // Member who did the verification
  action            VerificationAction  // APPROVED or REJECTED
  notes             String?
  createdAt         DateTime            @default(now())
  
  request           ChurchVerificationRequest @relation(fields: [requestId], references: [id])
  verifier          User                @relation("MemberVerifications", fields: [verifierId], references: [id])
  
  @@unique([requestId, verifierId]) // One verification per member per request
}

model ChurchInvitation {
  id              String    @id @default(cuid())
  inviterEmail    String    // User who sent invitation
  inviterName     String    // User's name
  inviterPhone    String?   // User's phone
  churchEmail     String    // Target church email
  customMessage   String?   // "To whom it may concern" message
  status          ChurchInvitationStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  expiresAt       DateTime  // 7 days from creation
  claimedAt       DateTime?
  claimedByUserId String?   // User who claimed the invitation
  
  inviter         User      @relation("ChurchInvitations", fields: [inviterEmail], references: [email])
  claimedBy       User?     @relation("ClaimedChurchInvitations", fields: [claimedByUserId], references: [id])
}

model InvitationAnalytics {
  id              String    @id @default(cuid())
  userId          String    // User being tracked
  churchInvitesSent Int     @default(0)
  userInvitesSent Int       @default(0)
  userInvitesScanned Int    @default(0)
  userInvitesCompleted Int  @default(0)
  lastUpdated     DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id])
  
  @@unique([userId])
}

model Message {
  id              String            @id @default(cuid())
  title           String?           // Optional for user-generated messages
  messageType     MessageType       @default(DAILY_MESSAGE)
  status          MessageStatus     @default(DRAFT)
  
  // Content
  content         String            // Markdown supported, max 500 chars
  contentType     ContentType       @default(TEXT)
  
  // Ownership & Scope
  churchId        String
  createdById     String
  targetAudience  TargetAudience    @default(CHURCH_MEMBERS)
  
  // Scheduling & Lifecycle
  scheduledFor    DateTime?         // When to publish (null = immediate)
  publishedAt     DateTime?         // When actually published
  expiresAt       DateTime?         // Auto-calculated: publishedAt + 24 hours
  
  // User-generated message fields
  category        UserMessageCategory? // For user-shared messages
  isAnonymous     Boolean           @default(false)
  
  // Moderation
  moderationStatus ModerationStatus @default(AUTO_APPROVED) // Church messages auto-approved
  moderatedAt     DateTime?
  moderatedById   String?           // Admin who moderated
  moderationNotes String?
  
  // Metadata
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  church          Church            @relation("ChurchMessages", fields: [churchId], references: [id])
  createdBy       User              @relation("CreatedMessages", fields: [createdById], references: [id])
  moderatedBy     User?             @relation("ModeratedMessages", fields: [moderatedById], references: [id])
  
  // Future: Interactive content relations
  poll            MessagePoll?      @relation("MessagePoll")
  form            MessageForm?      @relation("MessageForm")
  
  @@index([churchId, messageType, status, publishedAt])
  @@index([churchId, targetAudience, expiresAt])
  @@index([messageType, status, moderationStatus]) // For admin queries
  @@index([expiresAt]) // For cleanup jobs
}

// Future expansion models (Phase 4+)
model MessagePoll {
  id              String            @id @default(cuid())
  messageId       String            @unique
  question        String
  options         Json              // Array of poll options
  allowMultiple   Boolean           @default(false)
  expiresAt       DateTime?
  createdAt       DateTime          @default(now())
  
  message         Message           @relation("MessagePoll", fields: [messageId], references: [id], onDelete: Cascade)
  responses       PollResponse[]
}

model MessageForm {
  id              String            @id @default(cuid())
  messageId       String            @unique
  formTitle       String
  fields          Json              // Form field definitions
  expiresAt       DateTime?
  createdAt       DateTime          @default(now())
  
  message         Message           @relation("MessageForm", fields: [messageId], references: [id], onDelete: Cascade)
  responses       FormResponse[]
}

model PollResponse {
  id              String            @id @default(cuid())
  pollId          String
  userId          String
  selectedOptions Json              // Array of selected option indices
  createdAt       DateTime          @default(now())
  
  poll            MessagePoll       @relation(fields: [pollId], references: [id])
  user            User              @relation("PollResponses", fields: [userId], references: [id])
  
  @@unique([pollId, userId])
}

model FormResponse {
  id            String              @id @default(cuid())
  formId        String              // References the MessageForm
  responderId   String              // User who filled out the form
  responses     Json                // Form field responses
  submittedAt   DateTime            @default(now())
  
  form          MessageForm         @relation(fields: [formId], references: [id])
  responder     User                @relation("FormResponses", fields: [responderId], references: [id])
  
  @@unique([formId, responderId])
}

model WalkthroughProgress {
  id           String   @id @default(cuid())
  userId       String
  stepId       String
  completed    Boolean  @default(false)
  skipped      Boolean  @default(false)
  version      String   // e.g., "walkthrough_v1"
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  
  user         User     @relation("WalkthroughProgress", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, stepId, version])
}

model WalkthroughAnalytics {
  id           String   @id @default(cuid())
  userId       String
  stepId       String
  action       String   // "started" | "completed" | "skipped" | "error"
  errorMessage String?
  timestamp    DateTime @default(now())
  userRole     String
  
  user         User     @relation("WalkthroughAnalytics", fields: [userId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String   
  userRole    String   // USER, CHURCH, ADMIN
  userName    String   // Cached for performance
  userEmail   String   // Cached for performance
  category    String   // walkthrough, invitation, church, content, user, admin
  action      String   // completed_walkthrough, sent_invitation, etc.
  description String   // Human-readable description
  details     Json?    // Structured data (stepCount, completionTime, etc.)
  metadata    Json?    // Extra context (IP, userAgent, etc.)
  timestamp   DateTime @default(now())
  
  user        User     @relation("ActivityLogs", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([category, action])
  @@index([timestamp])
  @@index([category, timestamp])
}

enum UserRole {
  USER
  ADMIN
  CHURCH
}

enum ItemStatus {
  AVAILABLE
  CLAIMED
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ChurchMembershipStatus {
  NONE
  REQUESTED
  VERIFIED
  REJECTED
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VerificationAction {
  APPROVED
  REJECTED
}

enum ChurchInvitationStatus {
  PENDING
  CLAIMED
  EXPIRED
  CANCELLED
}

enum MessageType {
  DAILY_MESSAGE     // Church daily messages
  ANNOUNCEMENT      // Church announcements  
  USER_SHARE        // User-generated content
  POLL              // Interactive polls (Future)
  FORM              // Forms/surveys (Future)
}

enum MessageStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  EXPIRED
  ARCHIVED
}

enum ContentType {
  TEXT              // Markdown text
  POLL              // Interactive poll (Future)
  FORM              // Form/survey (Future)
}

enum TargetAudience {
  CHURCH_MEMBERS    // Verified members of the church + admin
  ALL_USERS         // Future: Platform-wide
  ADMIN_ONLY        // Admin messages
}

enum UserMessageCategory {
  TESTIMONY         // User testimonies
  PRAYER_REQUEST    // Prayer requests
  GOD_WINK          // God wink moments
}

enum ModerationStatus {
  AUTO_APPROVED     // Church messages (no moderation needed)
  PENDING           // User messages awaiting moderation
  APPROVED          // Manually approved by admin
  REJECTED          // Rejected by admin
  FLAGGED           // Flagged for review
}
