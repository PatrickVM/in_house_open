generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String?
  firstName     String?
  lastName      String?
  bio           String?
  churchName    String?
  churchWebsite String?
  services      String?
  role          UserRole    @default(USER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  latitude      Float?
  longitude     Float?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  phone         String?
  emailVerified DateTime?
  image         String?
  inviterId     String?
  accounts      Account[]
  inviteCode    InviteCode?
  claimedItems  Item[]      @relation("ItemClaimer")
  sessions      Session[]
  invitedBy     User?       @relation("UserInvites", fields: [inviterId], references: [id])
  invitees      User[]      @relation("UserInvites")
  ledChurch     Church?     @relation("LeadContactForChurch")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InviteCode {
  id        String    @id @default(cuid())
  code      String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  userId    String    @unique
  claimed   Boolean   @default(false)
  claimedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Item {
  id          String     @id @default(cuid())
  title       String
  description String?
  category    String
  latitude    Float
  longitude   Float
  address     String?
  city        String?
  state       String?
  zipCode     String?
  status      ItemStatus @default(AVAILABLE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  claimedAt   DateTime?
  completedAt DateTime?
  claimerId   String?
  claimer     User?      @relation("ItemClaimer", fields: [claimerId], references: [id])
  churchId    String     // Added: Foreign key to Church
  church      Church     @relation("ChurchItems", fields: [churchId], references: [id]) // Added: Relation to Church
}

enum UserRole {
  USER
  ADMIN
  CHURCH
}

enum ItemStatus {
  AVAILABLE
  CLAIMED
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Church {
  id                  String              @id @default(cuid())
  name                String
  leadPastorName      String
  website             String?
  address             String
  city                String
  state               String
  zipCode             String
  latitude            Float?
  longitude           Float?
  applicationStatus   ApplicationStatus   @default(PENDING)
  leadContactId       String              @unique
  leadContact         User                @relation("LeadContactForChurch", fields: [leadContactId], references: [id])
  items               Item[]              @relation("ChurchItems") // Added: A church can have many items
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}
